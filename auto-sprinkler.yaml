esphome:
  name: auto-sprinkler

# Configure as required
esp8266:
  board: esp01_1m
  restore_from_flash: true

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: "3937d17b3b98413c4bdf177d411d1691"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Test Fallback Hotspot"
    password: "2PVr5pmDuv93"

captive_portal:

time:
  - platform: homeassistant
    id: hass_time

datetime:
  - platform: template
    type: time
    name: "Auto Watering Time"
    id: automation_time
    restore_value: true
    initial_value: "07:00:00"
    optimistic: yes

globals:
  - id: last_rain
    type: time_t
    restore_value: true
    initial_value: '0'
  - id: last_watering
    type: time_t
    restore_value: true
    initial_value: '0'

sensor:
  - platform: template
    name: "Last Rain"
    id: last_rain_sensor
    device_class: timestamp
    lambda: |-
      if (id(last_rain) > 0) {
        return (float) id(last_rain);  // Return the epoch time of the last rain event
      } else {
        return NAN;  // Return NaN if no value is available
      }
  - platform: template
    name: "Last Watering"
    id: last_watering_sensor
    device_class: timestamp
    lambda: |-
      if (id(last_watering) > 0) {
        return (float) id(last_watering);  // Return the epoch time of the last watering event
      } else {
        return NAN;  // Return NaN if no value is available
      }
  - platform: template
    name: "Next Watering"
    id: next_watering_sensor
    device_class: timestamp
    lambda: |-
      int freq = id(frequency).state;
      if (freq == 0) {
        return NAN;  // No watering scheduled
      }

      // Calculate the next possible watering time
      time_t next_by_freq = id(last_watering) + (freq * 86400);
      time_t next_rain_delay = id(last_rain) + (48 * 3600);

      // Determine the later of the two
      time_t next_watering = max(next_by_freq, next_rain_delay);

      // Ensure it's in the future
      if (next_watering > id(hass_time).now().timestamp) {
        return (float) next_watering;
      } else {
        return NAN;
      }

text_sensor:
  - platform: homeassistant
    id: weather
    entity_id: weather.home

number:
  - platform: template
    name: "Watering Frequency"
    id: frequency
    optimistic: true
    min_value: 0
    max_value: 7
    step: 1
    restore_value: true

interval:
  - interval: 30min
    then:
      - lambda: |-
          // Track weather forcast and sprinkler on time
          if (id(weather).state == "rainy") {
            id(last_rain) = id(hass_time).now().timestamp;
            ESP_LOGD("conditions", "Rain logged at %s!", id(hass_time).now().strftime("%H:%M").c_str());
          }
          if (id(lawn_sprinkler_ctrlr).active_valve().has_value()) {
            id(last_watering) = id(hass_time).now().timestamp;
            ESP_LOGD("conditions", "Watering logged at %s!", id(hass_time).now().strftime("%H:%M").c_str());
          }
  - interval: 1min
    then:
      - lambda: |-
          // Automation variables
          int freq = id(frequency).state;
          ESPTime autorun = id(automation_time).state_as_esptime();
          ESPTime rain = esphome::ESPTime::from_epoch_local(id(last_rain));
          ESPTime last_run = esphome::ESPTime::from_epoch_local(id(last_watering));

          // Check if the current time matches the automation time
          if (id(hass_time).now().hour == autorun.hour && id(hass_time).now().minute == autorun.minute) {
            ESP_LOGD("autosprinker", "Sprinkler automation time matched at %s! Checking run conditions.", id(hass_time).now().strftime("%H:%M").c_str());
            
            // Check run conditions
            bool frequency_ok = (freq > 0);
            bool rain_ok = ((id(hass_time).now().timestamp - rain.timestamp) >= (48 * 3600));
            bool last_run_ok = ((id(hass_time).now().timestamp - last_run.timestamp) >= (168 * 3600 / freq));

            // Confirm automatic sprinkler run
            if (frequency_ok && rain_ok && last_run_ok) {
              ESP_LOGD("autosprinkler", "Running sprinklers! All conditions satisfied.");
              id(lawn_sprinkler_ctrlr).resume_or_start_full_cycle();
            } else if (!frequency_ok) {
              ESP_LOGD("autosprinkler", "Skipping automatic watering. Disabled with frequency set to 0.");
            } else if (!rain_ok) {
              ESP_LOGD("autosprinkler", "Skipping automatic watering. Rain was reported on %s.", rain.strftime("%d-%m-%y at %I:%M %p").c_str());
            } else if (!last_run_ok) {
              ESP_LOGD("autosprinkler", "Skipping automatic watering. Sprinkler run previously on %s.", last_run.strftime("%d-%m-%y at %I:%M %p").c_str());
            } else {
              ESP_LOGD("autosprinkler", "An unknown condition prevented automatic watering.");
            }
          } else {
            ESP_LOGD("autosprinkler", "Automation time not matched.");
          }